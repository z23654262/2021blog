<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java学习-2-初级-基本语法与数组</title>
    <link href="/2021/01/18/Java%E5%AD%A6%E4%B9%A0-2-%E5%88%9D%E7%BA%A7-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%95%B0%E7%BB%84/"/>
    <url>/2021/01/18/Java%E5%AD%A6%E4%B9%A0-2-%E5%88%9D%E7%BA%A7-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="关键字与保留字"><a href="#关键字与保留字" class="headerlink" title="关键字与保留字"></a>关键字与保留字</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><table><thead><tr><th>关键字类型</th><th>关键字</th></tr></thead><tbody><tr><td>数据类型</td><td>class、interface、enum、byte、short、int、long、float、double、char、boolean、void</td></tr><tr><td>流程控制</td><td>if、else、switch、case、default、while、do、for、break、continue、return</td></tr><tr><td>访问权限</td><td>private、protected、public</td></tr><tr><td>类、函数、变量修饰符</td><td>abstract、final、static、synchronized</td></tr><tr><td>类与类之间关系</td><td>extends、implements</td></tr><tr><td>建立、引用、判断实例</td><td>new、this、super、instanceof</td></tr><tr><td>异常处理</td><td>try、catch、finally、throw、throws</td></tr><tr><td>包</td><td>package、import</td></tr><tr><td>其他修饰符</td><td>native、strictfp、transient、volatile、assert</td></tr><tr><td>数据类型的字面值</td><td>true、false、null</td></tr></tbody></table><h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><ul><li>goto、const</li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>凡是可以自己命名的地方都叫做标识符，比如：类名、变量名、方法名、接口名、包名…</p><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><ul><li><p>由26个英文字母大小写，0-9 ，_或 $ 组成。</p></li><li><p>数字不可以开头。 </p></li><li><p>不可以使用关键字和保留字，但能包含关键字和保留字。 </p></li><li><p>Java中严格区分大小写，长度无限制。 </p></li><li><p>标识符不能包含空格。</p></li></ul><h2 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h2><ul><li><p>包名:多单词组成时所有字母都小写:xxxyyyzzz。</p></li><li><p>类名、接口名:多单词组成时，所有单词的首字母大写:XxxYyyZzz。</p></li><li><p>变量名、方法名:多单词组成时，第一个单词首字母小写，第二个单词开始每个 单词首字母大写:xxxYyyZzz。</p></li><li><p>常量名:所有字母都大写。多单词时每个单词用下划线连接:XXX_YYY_ZZZ。</p></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h2><h3 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h3><ul><li><p>内存中的一个存储区域。</p></li><li><p>该区域的数据可以在同一类型范围内不断变化。</p></li><li><p>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值。</p></li></ul><h3 id="变量的作用"><a href="#变量的作用" class="headerlink" title="变量的作用"></a>变量的作用</h3><ul><li>用于在内存中保存数据。</li></ul><h3 id="使用变量注意"><a href="#使用变量注意" class="headerlink" title="使用变量注意"></a>使用变量注意</h3><ul><li><p>Java中每个变量必须先声明，后使用。</p></li><li><p>使用变量名来访问这块区域的数据。</p></li><li><p>变量的作用域:其定义所在的一对{ }内。</p></li><li><p>变量只有在其作用域内才有效。</p></li><li><p>同一个作用域内，不能定义重名的变量。</p></li></ul><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="按数据类型分类"><a href="#按数据类型分类" class="headerlink" title="按数据类型分类"></a>按数据类型分类</h3><ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li></ul></li><li>字符型（char）</li><li>布尔型（boolean）</li></ul></li><li>引用数据类型<ul><li>类（class）</li><li>接口（interface）</li><li>数组（[]）</li></ul></li></ul><h3 id="按声明位置的不同分类"><a href="#按声明位置的不同分类" class="headerlink" title="按声明位置的不同分类"></a>按声明位置的不同分类</h3><ul><li>方法体外（成员变量）<ul><li>实例变量（不以static修饰）</li><li>类变量（以static修饰）</li></ul></li><li>方法体内（局部变量）<ul><li>形参（方法、构造器中定义的变量）</li><li>方法局部变量（方法内定义的变量）</li><li>代码块局部变量（代码块内定义的变量）</li></ul></li></ul><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p><strong><code>给变量赋值如果超出范围编译会失败！</code></strong></p><p><strong><code>Java中默认整型常量为int类型，声明long类型的常量需在后面添加&#39;l&#39;或&#39;L&#39;</code></strong></p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>-128-127</td></tr><tr><td>short</td><td>2字节</td><td>-2<sup>15</sup>~2<sup>15</sup>-1</td></tr><tr><td>int</td><td>4字节</td><td>-2<sup>31</sup>~2<sup>31</sup>-1(约21亿)</td></tr><tr><td>long</td><td>8字节</td><td>-2<sup>63</sup>~2<sup>63</sup>-1</td></tr></tbody></table><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// byte 1个字节</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">127</span>;<br><span class="hljs-comment">//b1 = 128; 编译不通过</span><br>System.out.println(b1);<br><span class="hljs-comment">// short 2个字节</span><br><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">128</span>;<br>System.out.println(s1);<br><span class="hljs-comment">// int 4个字节</span><br><span class="hljs-keyword">int</span> i1 = <span class="hljs-number">128</span>;<br>System.out.println(i1);<br><span class="hljs-comment">// long 8个字节 必须以l或L结尾 否则为int类型但是编译不报错</span><br><span class="hljs-keyword">long</span> l1 = <span class="hljs-number">128L</span>;<br>System.out.println(l1);<br></code></pre></td></tr></table></figure><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p><strong><code>给变量赋值如果超出范围编译会失败！</code></strong></p><p><strong><code>Java中默认浮点类型常量为double类型，声明float类型的常量需在后面添加&#39;f&#39;或&#39;F&#39;</code></strong></p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// float 4个字节 后面必须加上f或F 否则为double类型且会编译出错</span><br><span class="hljs-comment">// 表示数值的范围比long大</span><br><span class="hljs-keyword">float</span> f1 = <span class="hljs-number">3.1888F</span>;<br>System.out.println(f1);<br><span class="hljs-comment">// double 8个字节</span><br><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">3.1888</span>;<br>System.out.println(d1);<br></code></pre></td></tr></table></figure><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// char 2个字节</span><br><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;中&#x27;</span>;<br><span class="hljs-keyword">char</span> c3 = <span class="hljs-string">&#x27;张&#x27;</span>;<br>System.out.println(c1);<br>System.out.println(c2);<br>System.out.println(c3);<br>System.out.println(c1 + c2 + c3);<span class="hljs-comment">//44462</span><br><span class="hljs-comment">// 使用转义字符</span><br><span class="hljs-keyword">char</span> c4 = <span class="hljs-string">&#x27;\n&#x27;</span>;<br><span class="hljs-keyword">char</span> c5 = <span class="hljs-string">&#x27;\t&#x27;</span>;<br><span class="hljs-keyword">char</span> c6 = <span class="hljs-string">&#x27;\\&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + c4 + <span class="hljs-string">&quot;world&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + c5 + <span class="hljs-string">&quot;world&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + c6 + <span class="hljs-string">&quot;world&quot;</span>);<span class="hljs-comment">//hello\world</span><br><span class="hljs-comment">// 使用unicode编码</span><br><span class="hljs-keyword">char</span> c7 = <span class="hljs-string">&#x27;\u0123&#x27;</span>;<br>System.out.println(c7);<span class="hljs-comment">//ģ</span><br></code></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li><code>boolean类型被编译为int类型，等于是说JVM里占用字节和int完全一样，int是4个字节，于是boolean也是4字节</code></li><li>boolean数组在Oracle的JVM中，编码为byte数组，每个boolean元素占用8位=1字节</li><li>（待考证）boolean数组在非Oracle JVM里面，占用字节数也许不是1字节</li></ul><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><ul><li><p>自动类型转换:容量小的类型自动转换为容量大的数据类型。数据类型按容量大小排序为:</p><p><img src="/images/Java%E5%AD%A6%E4%B9%A0-2-%E5%88%9D%E7%BA%A7-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%B8%8E%E6%95%B0%E7%BB%84/image-20210118162004022.png" alt="image-20210118162004022"></p></li><li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的 那种数据类型，然后再进行计算。</p></li><li><p><code>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</code></p></li><li><p><code>boolean类型不能与其它数据类型运算。</code></p></li><li><p>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类 型的值将自动转化为字符串(String)类型。</p></li></ul><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  根据Java自动装箱拆箱机制可以通过instanceof来判断结果的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">judgeType</span><span class="hljs-params">(Object temp)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Byte) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;byte&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Character) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;char&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Short) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;short&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Integer) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;int&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Long) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;long&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Float) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;float&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp <span class="hljs-keyword">instanceof</span> Double) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;double&quot;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>&#125;<br><span class="hljs-comment">// byte &lt; char &lt; short &lt; int &lt; long &lt; float &lt; double</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> i1 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">long</span> l1 = <span class="hljs-number">100L</span>;<br><span class="hljs-keyword">float</span> f1 = <span class="hljs-number">3.14F</span>;<br><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">3.14</span>;<br><br>System.out.println(judgeType(b1 + b1));<span class="hljs-comment">// byte + byte = int</span><br><br>System.out.println(judgeType(b1 + c1));<span class="hljs-comment">// byte + char = int</span><br><br>System.out.println(judgeType(b1 + s1));<span class="hljs-comment">// byte + short = int</span><br><br>System.out.println(judgeType(c1 + s1));<span class="hljs-comment">// char + short = int</span><br><br>System.out.println(judgeType(b1 + i1));<span class="hljs-comment">// byte + int = int</span><br><br>System.out.println(judgeType(l1 + f1));<span class="hljs-comment">// long + float = float</span><br><br>System.out.println(judgeType(f1 + d1));<span class="hljs-comment">// float + double = double</span><br></code></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul><li><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使 用时要加上强制转换符:()，但可能造成精度降低或溢出,格外要注意。</p></li><li><p>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可 以实现把字符串转换成基本类型。</p></li><li><p><code>boolean类型不可以转换为其它的数据类型。</code></p></li></ul><p>练习题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//无精度损失</span><br><span class="hljs-keyword">long</span> l1 = <span class="hljs-number">123L</span>;<br><span class="hljs-keyword">short</span> s1 = (<span class="hljs-keyword">short</span>) l1;<br>System.out.println(s1);<span class="hljs-comment">//123</span><br><span class="hljs-comment">//精度损失1</span><br><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">16.2</span>;<br><span class="hljs-keyword">int</span> i1 = (<span class="hljs-keyword">int</span>) d1;<br>System.out.println(i1);<span class="hljs-comment">//16</span><br><span class="hljs-comment">//精度损失2</span><br><span class="hljs-keyword">int</span> i2 = <span class="hljs-number">128</span>;<br><span class="hljs-keyword">byte</span> b1 = (<span class="hljs-keyword">byte</span>) i2;<br>System.out.println(b1);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><h2 id="类型转换的特殊情况"><a href="#类型转换的特殊情况" class="headerlink" title="类型转换的特殊情况"></a>类型转换的特殊情况</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 情况1</span><br><span class="hljs-comment">// long赋值 如果忘记加 l或L 在不超过int范围情况下不会出错 超出就会编译错误</span><br><span class="hljs-keyword">long</span> l1 = <span class="hljs-number">128</span>;<br>System.out.println(judgeType(l1));<span class="hljs-comment">//l1仍为long类型</span><br><span class="hljs-comment">// 编译报错 过大的整数</span><br><span class="hljs-comment">// long l2 = 1239801283091823;</span><br><span class="hljs-comment">// 编译通过</span><br><span class="hljs-keyword">long</span> l2 = <span class="hljs-number">1239801283091823L</span>;<br><span class="hljs-comment">// 不加f或F报错 浮点型常量默认为double</span><br><span class="hljs-keyword">float</span> f1 = <span class="hljs-number">12.3F</span>;<br><br><span class="hljs-comment">// 情况2</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">12</span>;<br><span class="hljs-comment">// 编译报错 整型常量默认为int</span><br><span class="hljs-comment">//byte b2 = b1 + 1;</span><br></code></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul><li><code>String不是基本数据类型，属于引用数据类型。</code></li><li>使用方式与基本数据类型一致。例如:String str = “abcd”。</li><li>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如:<ul><li>str = str + “xyz” ;</li><li>int n = 100;</li><li>str = str + n。</li></ul></li></ul><p>练习题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//练习1</span><br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">10</span>;<br>String str = <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(c + num + str);<span class="hljs-comment">// 107hello</span><br>System.out.println(c + str + num);<span class="hljs-comment">// ahello10</span><br>System.out.println(c + (num + str));<span class="hljs-comment">// a10hello</span><br>System.out.println((c + num) + str);<span class="hljs-comment">// 107hello</span><br>System.out.println(str + num + c);<span class="hljs-comment">// hello10a</span><br><br><span class="hljs-comment">//练习2</span><br><span class="hljs-comment">//输出 *  *</span><br>System.out.println(<span class="hljs-string">&quot;*   *&quot;</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + (<span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>));<span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//练习3</span><br><span class="hljs-comment">//String str1 = 4;//判断对错</span><br>String str2 = <span class="hljs-number">3.5f</span> + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//判断对错</span><br>System.out.println(str2);<span class="hljs-comment">//3.5f</span><br>System.out.println(<span class="hljs-number">3</span> + <span class="hljs-number">4</span> + <span class="hljs-string">&quot;Hello!&quot;</span>);<span class="hljs-comment">//7Hello!</span><br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span> + <span class="hljs-number">3</span> + <span class="hljs-number">4</span>);<span class="hljs-comment">//Hello!34</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;Hello!&quot;</span>);<span class="hljs-comment">//98Hello!</span><br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span> + <span class="hljs-string">&#x27;a&#x27;</span> +<span class="hljs-number">1</span>);<span class="hljs-comment">//Hello!a1</span><br></code></pre></td></tr></table></figure><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p><code>世界上有10种人，认识和不认识二进制的</code></p><h2 id="进制的表示"><a href="#进制的表示" class="headerlink" title="进制的表示"></a>进制的表示</h2><ul><li>二进制(binary):0,1 ，满2进1.以0b或0B开头。 </li><li>十进制(decimal):0-9 ，满10进1。 </li><li>八进制(octal):0-7 ，满8进1. 以数字0开头表示。</li><li>十六进制(hex):0-9及A-F，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。 如:0x21AF +1= 0X21B0</li></ul><table><thead><tr><th><strong>0000 —— 0</strong></th><th><strong>0100 —— 4</strong></th><th><strong>1000 —— 8</strong></th><th><strong>1100 —— C</strong></th></tr></thead><tbody><tr><td><strong>0001 —— 1</strong></td><td><strong>0101 —— 5</strong></td><td><strong>1001 —— 9</strong></td><td><strong>1101 —— D</strong></td></tr><tr><td><strong>0010 —— 2</strong></td><td><strong>0110 —— 6</strong></td><td><strong>1010 —— A</strong></td><td><strong>1110 —— E</strong></td></tr><tr><td><strong>0011 —— 3</strong></td><td><strong>0111 —— 7</strong></td><td><strong>1011 —— B</strong></td><td><strong>1111 —— F</strong></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>知识梳理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>Java基本语法</tag>
      
      <tag>Java数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-1-初级-概述</title>
    <link href="/2021/01/16/Java%E5%AD%A6%E4%B9%A0-1-%E5%88%9D%E7%BA%A7-%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/01/16/Java%E5%AD%A6%E4%B9%A0-1-%E5%88%9D%E7%BA%A7-%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础知识图解"><a href="#Java基础知识图解" class="headerlink" title="Java基础知识图解"></a>Java基础知识图解</h1><p><img src="/images/Java%E5%AD%A6%E4%B9%A0-1-%E5%88%9D%E7%BA%A7-%E6%A6%82%E8%BF%B0/image-20210116210911836.png" alt="image-20210116210911836"></p><h1 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h1><p>SUN（Stanford University Network）推出的一门高级编程语言。</p><p>现主要作为后台开发的语言。</p><p>主要用于后台开发的编程语言：Java、PHP、Python、Go、Node.js。</p><p>从1.5之后，版本命名改为5.0。</p><table><thead><tr><th align="left">类型</th><th>应用</th></tr></thead><tbody><tr><td align="left">Java SE（Standard Edition）标准版</td><td>桌面级应用开发</td></tr><tr><td align="left">Java EE（Enterprise Edition）企业版</td><td>企业级应用开发</td></tr><tr><td align="left">Java ME（Micro Edition）小型版</td><td>移动端应用开发</td></tr><tr><td align="left">Java Card</td><td>Java小程序（Applets）</td></tr></tbody></table><h1 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>两个基本概念：类、对象。</li><li>三大特性：封装、继承多态。</li></ul><h2 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h2><ul><li>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分(如指针、内存的申请与释放等)，提供了一个相对安全的内存管理和访问机制。</li></ul><h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><ul><li><p>跨平台性:通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write once , Run Anywhere”。</p></li><li><p>原理:只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</p></li></ul><h2 id="Java虚拟机JVM（Java-Virtual-Machine）"><a href="#Java虚拟机JVM（Java-Virtual-Machine）" class="headerlink" title="Java虚拟机JVM（Java Virtual Machine）"></a>Java虚拟机JVM（Java Virtual Machine）</h2><ul><li><p>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指 令，管理数据、内存、寄存器。</p></li><li><p>对于不同的平台，有不同的虚拟机。 </p></li><li><p>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行 。</p></li><li><p>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”。</p></li></ul><h2 id="垃圾回收机制GC（Garbage-Collection）"><a href="#垃圾回收机制GC（Garbage-Collection）" class="headerlink" title="垃圾回收机制GC（Garbage Collection）"></a>垃圾回收机制GC（Garbage Collection）</h2><ul><li><p>不再使用的内存空间应回收—— 垃圾回收。</p><ul><li><p>在C/C++等语言中，由程序员负责回收无用内存。</p></li><li><p>Java 语言消除了程序员回收无用内存空间的责任:它提供一种系统级线程跟踪存储空 间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。</p></li></ul></li><li><p>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</p></li></ul><h2 id="JDK（Java-Development-Kit）、JRE（Java-Runtime-Environment）"><a href="#JDK（Java-Development-Kit）、JRE（Java-Runtime-Environment）" class="headerlink" title="JDK（Java Development Kit）、JRE（Java Runtime Environment）"></a>JDK（Java Development Kit）、JRE（Java Runtime Environment）</h2><ul><li>JDK=JRE+开发工具集</li><li>JRE=JVM+JavaSE标准类库</li></ul><p><img src="/images/Java%E5%AD%A6%E4%B9%A0-1-%E5%88%9D%E7%BA%A7-%E6%A6%82%E8%BF%B0/image-20210118124639863.png" alt="image-20210118124639863"></p><h1 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h1><h2 id="windows版"><a href="#windows版" class="headerlink" title="windows版"></a>windows版</h2><ul><li><p>JDK下载</p></li><li><p>JDK安装</p></li><li><p>环境变量配置</p></li></ul><h2 id="mac版"><a href="#mac版" class="headerlink" title="mac版"></a>mac版</h2><ul><li>下载dmg格式的JDK安装包</li><li>安装即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>知识梳理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>Java语言特点</tag>
      
      <tag>Java环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="/2021/01/15/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/01/15/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h2><ol><li><p>环境</p><p>nodejs：官网安装即可</p><p>cnpm安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li><li><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>初始化hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo hexo init<br></code></pre></td></tr></table></figure></li><li><p>启动hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><h2 id="使用hexo来写博客"><a href="#使用hexo来写博客" class="headerlink" title="使用hexo来写博客"></a>使用hexo来写博客</h2></li><li><p>新增一篇文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo n &#x27;文章名字&#x27;<br></code></pre></td></tr></table></figure></li></ol><h2 id="将博客部署到github"><a href="#将博客部署到github" class="headerlink" title="将博客部署到github"></a>将博客部署到github</h2><ol><li><p>安装git hexo-deployer-git</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">cnpm install <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure></li><li><p>设置_config.yml</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
